##im html code:


@if(string.isNullOrEmpty(Model.Greeting)){                  //kann auch im Model mit bool ShowGreeting ersetzt werden
  <ul>
    @for (int i = 0; i < Model.Greeting.Length; i++)
    {
      //var x = i * 2;

      <li>@Model.Greeting[i]</li>
    }
  </ul>
}

##normalen string ausgeben im cshtml:

<text>Nächstes Zeichen:</text>

app.UseStaticFiles();                                     //webserver kann statische dateien anzeigen

//es fehlt aber noch der wwwroot folder --> erstellen
//html file hinzufügen    /<dateiname>.html


Dependency Injection wenn Unit tests erstellt werden sollen

services.AddSingleton()     //einmal für das ganze Programm, 
         AddScoped()
         AddTransient()     //immer wieder angelegt wenn es gebraucht wird

             Service    , Implementierung
AddSingleton<ICustomerDb, CustomerDb>()


Solution --> add new Project --> Unit Test Project (NUnit bei Roman) --> gleicher Name mit .Test dahinter mit gleichem Target Framework

Jede Klasse eine eigene Test klasse!

Setup code: Vor ausführen jedes Unittests ausgeführt

//Arrange
Objecte Anlegen
//Act
Funktionsaufruf (üblicherweise)
//Assert
Bewerten


ProjectReference auf zu testende klasse
MockObject: NuGet Package bei NUnit : NSubsitute
ICustomerDB db = NSubstitute.Substitute.For<ICustomerDb>();

#Logger
ASP.Net Core WEb app (model-view-controller)

MapControllerRoute: 
Controller entscheidet anhand von url wo man hin kommt
Views müssen im eingenen Views Folder sein


Controller:
HomeController --> Home --> muss von Controller ableiten und einen funktionierenden Constructor besitzen.

url /index --> Index Methode wird aufgerufen
Muss immer ein ViewResult zurückliefern
Sucht View im Ordner Views/Home/Index.cshtml                     //weil es vom Home-Controller gerufen wurde mit GetIndex

alle daten die ausgetauscht werden sollen werden in ein ErrorViewModel gepackt

Trennung "Schönheitsfehler": View akzeptiert irgend ein object
z.B. wenn man einen String mitgibt kann er nicht mit dem ErrorViewModel gematched werden
(Polyphormy ist ok)

Controller Order: Rechtsklick --> Add Controller --> MCV Controller Empty: CommentController.cs
Logging hinzufügen:
private readonly ILogger _Logger;
public CommentController (ILogger<CommentController> logger){
  _Logger = logger;
}

Interface hinzufügen: ICommentStore.cs //public setzen

Model: Add class: CommentViewModel.cs

view soll nur aus dem hauptspeicher des webservers arbeiten
Entsprechende Unterordner für eigene Klassen

ValidateAntiForgeryToken
Formular OverPosting: mit den Formulardaten andere Daten hinzufügen

























