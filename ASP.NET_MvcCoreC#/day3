#Ínput validation

Im NewCommentViewModel

using System.ComponentModel.DataAnnotations;

isValid überschreiben bei eigenen Validierern (Validationattribute)



[Required()]
[MaxLength(80)
public string UserName [Get;set;]


[Required(ErrorMessage O "The value for {0} is required!")]
[MaxLength(1024)
[Display(Prompt = "Nickname", Name="Nichname", Description = "Your nickname for the comment")]                  //Prompt = Wasserzeichen im Input
public string Messaage [Get;set;]


bei Controller:
if(Modelstate.isvalid)                                //nicht vergessen!!!!!

Validierung wird im html als data-val eingebettet.

###BenutzerAusgabe bei Validierungsfehler:

<span asp-validationfor="Message"></span>         //für inputs

<div asp-validation-summary="All"></div>




@RenderBody()
@RenderSection("Scripts", required false)         //falls true: laufzeitfehler
damit kann man mehrere Renders machen

Section anlegen mit:
@section Scripts{
  ... eigene scripts
}

wenn die section nicht mit RenderSection geholt wird verschwindet der Inhalt einfach




[DataType(DataType.Password)]

@HTML.EditorFor(x => x.Message)

manage user secrets

libman.json
partial view --> 


View Components --> wie partial Views aufgestellt
Klasse für View Component:
- muss entweder von View Component Klasse abgleiten
- muss auf ViewComponent enden
- oder muss als View Component gekennzeichnet werden

ableiten --> InvokeAsync überschreiben




















