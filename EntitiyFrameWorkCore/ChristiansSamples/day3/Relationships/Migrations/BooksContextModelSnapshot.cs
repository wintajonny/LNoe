// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Relationships.Migrations
{
    [DbContext(typeof(BooksContext))]
    partial class BooksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("bk")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Publisher")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Publisher = "Wrox Press",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(333),
                            Title = "Professional C#"
                        },
                        new
                        {
                            BookId = 2,
                            Publisher = "Wrox Press",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(35),
                            Title = "Professional C# 2nd Edition"
                        },
                        new
                        {
                            BookId = 3,
                            Publisher = "Wrox Press",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(83),
                            Title = "Professional C# 3rd Edition"
                        },
                        new
                        {
                            BookId = 4,
                            Publisher = "Wrox Press",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(45),
                            Title = "Professional C# 2005"
                        },
                        new
                        {
                            BookId = 5,
                            Publisher = "Wrox Press",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(44),
                            Title = "Professional C# 2005 with .NET 3.0"
                        },
                        new
                        {
                            BookId = 6,
                            Publisher = "Wrox Press",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(23),
                            Title = "Professional C# 2008"
                        },
                        new
                        {
                            BookId = 7,
                            Publisher = "Wrox Press",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(134),
                            Title = "Professional C# 4 and .NET 4"
                        },
                        new
                        {
                            BookId = 8,
                            Publisher = "Wrox Press",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(6),
                            Title = "Professional C# 2012 and .NET 4.5"
                        },
                        new
                        {
                            BookId = 9,
                            Publisher = "Wrox Press",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(71),
                            Title = "Professional C# 5.0 and .NET 4.5.1"
                        },
                        new
                        {
                            BookId = 10,
                            Publisher = "Wrox Press",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(17),
                            Title = "Professional C# 6 and .NET Core 1.0"
                        },
                        new
                        {
                            BookId = 11,
                            Publisher = "Wrox Press",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(13),
                            Title = "Professional C# 7 and .NET Core 2.0"
                        },
                        new
                        {
                            BookId = 12,
                            Publisher = "Wrox Press",
                            Title = "Professional C# and .NET 2021 Edition"
                        });
                });

            modelBuilder.Entity("BookPerson", b =>
                {
                    b.Property<int>("AuthorsPersonId")
                        .HasColumnType("int");

                    b.Property<int>("WrittenBooksBookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsPersonId", "WrittenBooksBookId");

                    b.HasIndex("WrittenBooksBookId");

                    b.ToTable("BookPerson");

                    b.HasData(
                        new
                        {
                            AuthorsPersonId = 1,
                            WrittenBooksBookId = 1
                        },
                        new
                        {
                            AuthorsPersonId = 2,
                            WrittenBooksBookId = 1
                        },
                        new
                        {
                            AuthorsPersonId = 1,
                            WrittenBooksBookId = 2
                        });
                });

            modelBuilder.Entity("Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            FirstName = "Allen",
                            LastName = "Jones"
                        },
                        new
                        {
                            PersonId = 2,
                            FirstName = "Bill",
                            LastName = "Evjen"
                        },
                        new
                        {
                            PersonId = 3,
                            FirstName = "Burton",
                            LastName = "Harvey"
                        },
                        new
                        {
                            PersonId = 4,
                            FirstName = "Christian",
                            LastName = "Nagel"
                        },
                        new
                        {
                            PersonId = 5,
                            FirstName = "Jay",
                            LastName = "Glynn"
                        },
                        new
                        {
                            PersonId = 6,
                            FirstName = "Karli",
                            LastName = "Watson"
                        },
                        new
                        {
                            PersonId = 7,
                            FirstName = "K S",
                            LastName = "Allen"
                        },
                        new
                        {
                            PersonId = 8,
                            FirstName = "Morgan",
                            LastName = "Skinner"
                        },
                        new
                        {
                            PersonId = 9,
                            FirstName = "Ollie",
                            LastName = "Cornes"
                        },
                        new
                        {
                            PersonId = 10,
                            FirstName = "Simon",
                            LastName = "Robinson"
                        },
                        new
                        {
                            PersonId = 11,
                            FirstName = "Zach",
                            LastName = "Greenvoss"
                        });
                });

            modelBuilder.Entity("BookPerson", b =>
                {
                    b.HasOne("Person", null)
                        .WithMany()
                        .HasForeignKey("AuthorsPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book", null)
                        .WithMany()
                        .HasForeignKey("WrittenBooksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Person", b =>
                {
                    b.OwnsOne("Address", "BusinessAddress", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("LineOne")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("AddressLineOne");

                            b1.Property<string>("LineTwo")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("AddressLineTwo");

                            b1.HasKey("PersonId");

                            b1.ToTable("People");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");

                            b1.OwnsOne("Location", "Location", b2 =>
                                {
                                    b2.Property<int>("AddressPersonId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("City")
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)")
                                        .HasColumnName("BusinessCity");

                                    b2.Property<string>("Country")
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)")
                                        .HasColumnName("BusinessCountry");

                                    b2.HasKey("AddressPersonId");

                                    b2.ToTable("People");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressPersonId");
                                });

                            b1.Navigation("Location");
                        });

                    b.OwnsOne("Address", "PrivateAddress", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("int");

                            b1.Property<string>("LineOne")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("LineTwo")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("PersonId");

                            b1.ToTable("PrivateAddresses");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");

                            b1.OwnsOne("Location", "Location", b2 =>
                                {
                                    b2.Property<int>("AddressPersonId")
                                        .HasColumnType("int");

                                    b2.Property<string>("City")
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)")
                                        .HasColumnName("City");

                                    b2.Property<string>("Country")
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)")
                                        .HasColumnName("Country");

                                    b2.HasKey("AddressPersonId");

                                    b2.ToTable("PrivateAddresses");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressPersonId");
                                });

                            b1.Navigation("Location");
                        });

                    b.Navigation("BusinessAddress");

                    b.Navigation("PrivateAddress");
                });
#pragma warning restore 612, 618
        }
    }
}
